{
  "info": {
    "_postman_id": "12345678-1234-5678-9abc-123456789012",
    "name": "Flask ML API - Iris Classification",
    "description": "API REST para clasificación de flores Iris usando Machine Learning con Flask.\n\nEsta colección incluye:\n- Endpoint de verificación de salud\n- Predicciones con casos válidos\n- Casos de error para validación\n\nAsegúrate de que la API esté corriendo en http://localhost:5000 antes de usar esta colección.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Health Check",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"API is ready\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.message).to.eql(\"API lista\");",
              "});",
              "",
              "pm.test(\"Model info is present\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('model_info');",
              "    pm.expect(jsonData.model_info.target_classes).to.be.an('array');",
              "    pm.expect(jsonData.model_info.feature_count).to.eql(4);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:5000/",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "5000",
          "path": [
            ""
          ]
        },
        "description": "Verifica que la API esté funcionando correctamente y retorna información básica del modelo."
      },
      "response": []
    },
    {
      "name": "Predict - Iris Setosa",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has prediction\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('prediction');",
              "    pm.expect(jsonData).to.have.property('confidence');",
              "    pm.expect(jsonData).to.have.property('probabilities');",
              "});",
              "",
              "pm.test(\"Confidence is between 0 and 1\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.confidence).to.be.at.least(0);",
              "    pm.expect(jsonData.confidence).to.be.at.most(1);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"features\": [5.1, 3.5, 1.4, 0.2]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:5000/predict",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "5000",
          "path": [
            "predict"
          ]
        },
        "description": "Predicción para una flor Iris Setosa típica.\nCaracterísticas: [largo_sépalo, ancho_sépalo, largo_pétalo, ancho_pétalo]"
      },
      "response": []
    },
    {
      "name": "Predict - Iris Versicolor",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has prediction\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('prediction');",
              "    pm.expect(jsonData).to.have.property('confidence');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"features\": [7.0, 3.2, 4.7, 1.4]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:5000/predict",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "5000",
          "path": [
            "predict"
          ]
        },
        "description": "Predicción para una flor Iris Versicolor típica.\nEste ejemplo tiene características intermedias entre Setosa y Virginica."
      },
      "response": []
    },
    {
      "name": "Predict - Iris Virginica",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has prediction\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('prediction');",
              "    pm.expect(jsonData).to.have.property('confidence');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"features\": [6.3, 3.3, 6.0, 2.5]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:5000/predict",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "5000",
          "path": [
            "predict"
          ]
        },
        "description": "Predicción para una flor Iris Virginica típica.\nEste tipo generalmente tiene pétalos más largos y anchos."
      },
      "response": []
    },
    {
      "name": "Error Case - Missing Features Key",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test(\"Error message is present\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('error');",
              "    pm.expect(jsonData.error).to.include('features');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"data\": [5.1, 3.5, 1.4, 0.2]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:5000/predict",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "5000",
          "path": [
            "predict"
          ]
        },
        "description": "Caso de error: JSON sin la clave 'features' requerida.\nLa API debe retornar un error 400 con mensaje descriptivo."
      },
      "response": []
    },
    {
      "name": "Error Case - Wrong Number of Features",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test(\"Error message mentions expected features\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('error');",
              "    pm.expect(jsonData.error).to.include('4 características');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"features\": [5.1, 3.5, 1.4]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:5000/predict",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "5000",
          "path": [
            "predict"
          ]
        },
        "description": "Caso de error: Número incorrecto de características.\nEl modelo Iris requiere exactamente 4 características."
      },
      "response": []
    },
    {
      "name": "Error Case - Non-Numeric Features",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test(\"Error message mentions numeric values\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('error');",
              "    pm.expect(jsonData.error).to.include('numéricos');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"features\": [\"a\", \"b\", \"c\", \"d\"]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:5000/predict",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "5000",
          "path": [
            "predict"
          ]
        },
        "description": "Caso de error: Características no numéricas.\nTodas las características deben ser valores numéricos válidos."
      },
      "response": []
    },
    {
      "name": "Error Case - Empty Features Array",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test(\"Error message is descriptive\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('error');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"features\": []\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:5000/predict",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "5000",
          "path": [
            "predict"
          ]
        },
        "description": "Caso de error: Array de características vacío.\nDebe proporcionar exactamente 4 valores."
      },
      "response": []
    },
    {
      "name": "Error Case - Invalid Content Type",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test(\"Error message mentions content type\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('error');",
              "    pm.expect(jsonData.error).to.include('Content-Type');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "text/plain"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"features\": [5.1, 3.5, 1.4, 0.2]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:5000/predict",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "5000",
          "path": [
            "predict"
          ]
        },
        "description": "Caso de error: Content-Type incorrecto.\nLa API requiere 'application/json'."
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Script global que se ejecuta antes de cada request",
          "console.log('Ejecutando request hacia la API Flask ML');"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Script global que se ejecuta después de cada request",
          "console.log('Response time:', pm.response.responseTime + 'ms');",
          "",
          "// Log del status code",
          "console.log('Status code:', pm.response.code);"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:5000",
      "type": "string"
    },
    {
      "key": "api_version",
      "value": "v1",
      "type": "string"
    }
  ]
}